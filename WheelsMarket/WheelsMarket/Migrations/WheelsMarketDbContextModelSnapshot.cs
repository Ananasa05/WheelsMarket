// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WheelsMarket.Data;

#nullable disable

namespace WheelsMarket.Migrations
{
    [DbContext(typeof(WheelsMarketDbContext))]
    partial class WheelsMarketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("24da8b40-25fa-4fb5-a453-b168ac1a6256"),
                            ConcurrencyStamp = "6465a1d8-97a9-4448-89ea-e484ea2921ac",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("13ead2ca-3577-444c-a1ec-6dce24ad5bae"),
                            ConcurrencyStamp = "e1b5e66c-62cb-442f-9a3b-542348e36a7e",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d1a1ff64-6926-4a47-a358-ff0f76f634b3"),
                            RoleId = new Guid("24da8b40-25fa-4fb5-a453-b168ac1a6256")
                        },
                        new
                        {
                            UserId = new Guid("58481143-b8f4-4d21-bdec-5b118dd8a15a"),
                            RoleId = new Guid("13ead2ca-3577-444c-a1ec-6dce24ad5bae")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleTypeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeTypeId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e139c5f-3f01-4b8b-9471-4a87a2253db2"),
                            Name = "Alfa Romeo",
                            VehicleTypeTypeId = new Guid("5e07a858-09c8-4653-9603-e59dcc1aea23")
                        },
                        new
                        {
                            Id = new Guid("bccfe962-c5f7-41d6-b6c2-f32577cb47de"),
                            Name = "Audi",
                            VehicleTypeTypeId = new Guid("5e07a858-09c8-4653-9603-e59dcc1aea23")
                        },
                        new
                        {
                            Id = new Guid("fa3de5c8-07c7-44f8-882d-ff87d51f5ad0"),
                            Name = "Audi",
                            VehicleTypeTypeId = new Guid("ad5fbbce-fb6c-4e13-92ca-2f4b97911f49")
                        },
                        new
                        {
                            Id = new Guid("da6e5a3a-79c5-4ffb-926d-b1fb055688c1"),
                            Name = "BMW",
                            VehicleTypeTypeId = new Guid("5e07a858-09c8-4653-9603-e59dcc1aea23")
                        },
                        new
                        {
                            Id = new Guid("b53d3c4b-2227-482a-846d-e528bfe4d6f5"),
                            Name = "BMW",
                            VehicleTypeTypeId = new Guid("ef5f6c10-a42e-4fe9-8f7a-5170d0b40f14")
                        },
                        new
                        {
                            Id = new Guid("0b3f1df4-5ebb-4b92-b79b-2f0bb89d2eb2"),
                            Name = "BMW",
                            VehicleTypeTypeId = new Guid("ad5fbbce-fb6c-4e13-92ca-2f4b97911f49")
                        },
                        new
                        {
                            Id = new Guid("7a0ccdd0-847f-45bc-bf56-baac3fafbd37"),
                            Name = "Ferrari",
                            VehicleTypeTypeId = new Guid("5e07a858-09c8-4653-9603-e59dcc1aea23")
                        },
                        new
                        {
                            Id = new Guid("5c20260c-1fe0-4f09-87d1-9fecab63bb93"),
                            Name = "Ford",
                            VehicleTypeTypeId = new Guid("5e07a858-09c8-4653-9603-e59dcc1aea23")
                        },
                        new
                        {
                            Id = new Guid("adcf7fdf-46aa-4c40-a38a-61b4047d590f"),
                            Name = "Jeep",
                            VehicleTypeTypeId = new Guid("ef5f6c10-a42e-4fe9-8f7a-5170d0b40f14")
                        },
                        new
                        {
                            Id = new Guid("c16d7e37-2017-46b1-bf0e-7dce36674ce4"),
                            Name = "Jeep",
                            VehicleTypeTypeId = new Guid("5e07a858-09c8-4653-9603-e59dcc1aea23")
                        },
                        new
                        {
                            Id = new Guid("ef196c35-750e-4904-bb67-eb9df6831267"),
                            Name = "Lada",
                            VehicleTypeTypeId = new Guid("5e07a858-09c8-4653-9603-e59dcc1aea23")
                        },
                        new
                        {
                            Id = new Guid("6adf767f-a026-4bac-81c7-407a379a745d"),
                            Name = "Lexus",
                            VehicleTypeTypeId = new Guid("5e07a858-09c8-4653-9603-e59dcc1aea23")
                        },
                        new
                        {
                            Id = new Guid("a45d4356-b783-4063-af85-ecb0287b682c"),
                            Name = "Mercedes-Benz",
                            VehicleTypeTypeId = new Guid("5e07a858-09c8-4653-9603-e59dcc1aea23")
                        });
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.Edition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Editions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5c1ff08-a57c-49b7-80a9-7d5804e1b4ef"),
                            BrandId = new Guid("8e139c5f-3f01-4b8b-9471-4a87a2253db2"),
                            Name = "GT"
                        },
                        new
                        {
                            Id = new Guid("05109622-9b86-40c7-8b2b-89bafa09fc21"),
                            BrandId = new Guid("8e139c5f-3f01-4b8b-9471-4a87a2253db2"),
                            Name = "Spider"
                        },
                        new
                        {
                            Id = new Guid("94187284-2cdf-4d3c-8ae3-47c266122a26"),
                            BrandId = new Guid("fa3de5c8-07c7-44f8-882d-ff87d51f5ad0"),
                            Name = "А4 Allroad"
                        },
                        new
                        {
                            Id = new Guid("15e67473-da39-433b-8c24-50ae8344a48a"),
                            BrandId = new Guid("fa3de5c8-07c7-44f8-882d-ff87d51f5ad0"),
                            Name = "RS 6"
                        },
                        new
                        {
                            Id = new Guid("d06fd2a8-60f9-44fe-9484-5358855851b8"),
                            BrandId = new Guid("bccfe962-c5f7-41d6-b6c2-f32577cb47de"),
                            Name = "Q7"
                        },
                        new
                        {
                            Id = new Guid("2e89ffec-aae1-4620-b5f9-81b3fd59b04d"),
                            BrandId = new Guid("bccfe962-c5f7-41d6-b6c2-f32577cb47de"),
                            Name = "RSQ8"
                        },
                        new
                        {
                            Id = new Guid("addca70a-f8e1-4165-9ad6-ead636411b65"),
                            BrandId = new Guid("0b3f1df4-5ebb-4b92-b79b-2f0bb89d2eb2"),
                            Name = "M3 Touring"
                        },
                        new
                        {
                            Id = new Guid("1e9ade8f-9650-43cd-9cb9-cf167e53d61e"),
                            BrandId = new Guid("0b3f1df4-5ebb-4b92-b79b-2f0bb89d2eb2"),
                            Name = "i5 Touring"
                        },
                        new
                        {
                            Id = new Guid("9b5026f5-a2da-4fd1-9d64-adfbd1e1034e"),
                            BrandId = new Guid("da6e5a3a-79c5-4ffb-926d-b1fb055688c1"),
                            Name = "X6"
                        },
                        new
                        {
                            Id = new Guid("aa7212f8-75b8-474a-91e2-dda3bc404caf"),
                            BrandId = new Guid("da6e5a3a-79c5-4ffb-926d-b1fb055688c1"),
                            Name = "X5"
                        },
                        new
                        {
                            Id = new Guid("22656d2b-e20e-48d9-bee0-dd5e0c661dc3"),
                            BrandId = new Guid("b53d3c4b-2227-482a-846d-e528bfe4d6f5"),
                            Name = "430i Convertible"
                        },
                        new
                        {
                            Id = new Guid("c65b36c2-2eae-4908-83c0-3d0f2f773e6c"),
                            BrandId = new Guid("b53d3c4b-2227-482a-846d-e528bfe4d6f5"),
                            Name = "M3 Convertible"
                        },
                        new
                        {
                            Id = new Guid("a0eac45a-9df8-4307-9ecf-f9301e76bf02"),
                            BrandId = new Guid("7a0ccdd0-847f-45bc-bf56-baac3fafbd37"),
                            Name = "F12"
                        },
                        new
                        {
                            Id = new Guid("de5f924e-3139-4025-9156-929beed960b7"),
                            BrandId = new Guid("7a0ccdd0-847f-45bc-bf56-baac3fafbd37"),
                            Name = "Enzo"
                        },
                        new
                        {
                            Id = new Guid("be74fb89-0291-475c-9995-1982714d8b4d"),
                            BrandId = new Guid("5c20260c-1fe0-4f09-87d1-9fecab63bb93"),
                            Name = "Focus"
                        },
                        new
                        {
                            Id = new Guid("de1bafe4-18a6-404c-bef6-734f8bedd697"),
                            BrandId = new Guid("5c20260c-1fe0-4f09-87d1-9fecab63bb93"),
                            Name = "Fiesta"
                        },
                        new
                        {
                            Id = new Guid("71545e27-d6f3-41c6-ad01-d422b733c252"),
                            BrandId = new Guid("c16d7e37-2017-46b1-bf0e-7dce36674ce4"),
                            Name = "Jeep Grand Cherokee"
                        },
                        new
                        {
                            Id = new Guid("30160a51-800f-4e7f-88b0-6ba7cd352190"),
                            BrandId = new Guid("c16d7e37-2017-46b1-bf0e-7dce36674ce4"),
                            Name = "Avenger"
                        },
                        new
                        {
                            Id = new Guid("236ebe94-b13a-423a-97f4-9caed0519b90"),
                            BrandId = new Guid("adcf7fdf-46aa-4c40-a38a-61b4047d590f"),
                            Name = "Wrangler"
                        });
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.Favourite", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1a1ff64-6926-4a47-a358-ff0f76f634b3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af0ac38c-3935-4029-87de-7f567f7adcf9",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Lyudmil",
                            LastName = "Atanasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELbOfevKoM4RPTThUTzzzdyS0jxGuax1Z7NlvVvmuhrn69D8gZAlFVZ9wZuknYdkew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2df85017-21dd-40ed-814e-9b5fefbe8b4b",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("58481143-b8f4-4d21-bdec-5b118dd8a15a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34ac4505-699d-4dc1-97d7-580df4f0b74b",
                            Email = "client@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Иван",
                            LastName = "Иванов",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@GMAIL.COM",
                            NormalizedUserName = "CLIENT_1",
                            PasswordHash = "AQAAAAEAACcQAAAAENQiKvC5ZgYvS1PCMw6IewtH7JLxBsyaih8Y3f+kS72HUIs5CE3U73431WxXmtOqzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07b1eb8a-d2ce-43d8-979d-e4a590135932",
                            TwoFactorEnabled = false,
                            UserName = "Client 1"
                        });
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Distance")
                        .HasColumnType("int");

                    b.Property<Guid?>("EditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EuroStandard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fuel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HoursePower")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsVehicleApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LocationRegion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationTown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoreInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VinNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Volume")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.Property<string>("Тransmission")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06befde8-a6ae-411d-9597-3705449e5bd1"),
                            Color = "Зелен",
                            Condition = "Нов",
                            Currency = "лв",
                            Distance = 185639,
                            EditionId = new Guid("94187284-2cdf-4d3c-8ae3-47c266122a26"),
                            EuroStandard = "Euro 5",
                            Fuel = "Дизел",
                            HoursePower = 170,
                            ImageURL = "https://s1.1zoom.me/b4067/303/Audi_2019_A4_allroad_quattro_Grey_Metallic_Estate_570422_1920x1080.jpg",
                            IsVehicleApproved = false,
                            LocationRegion = "Стара Загора",
                            LocationTown = "Казанлък",
                            MoreInformation = "Колата няма никакви забележки, само задната лява седалка е скъсана.",
                            Price = 15399,
                            UserId = new Guid("58481143-b8f4-4d21-bdec-5b118dd8a15a"),
                            VinNumber = 10001,
                            Volume = 2500,
                            Year = 2009,
                            Тransmission = "Ръчна"
                        },
                        new
                        {
                            Id = new Guid("f6a6597e-f73c-46a1-abb2-b448f1883f96"),
                            Color = "Червен",
                            Condition = "Употребяван",
                            Currency = "USD",
                            Distance = 95000,
                            EditionId = new Guid("15e67473-da39-433b-8c24-50ae8344a48a"),
                            EuroStandard = "Euro 6",
                            Fuel = "Бензин",
                            HoursePower = 150,
                            ImageURL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQevdE1eAryK9STmDnZYNZhk4j2TA2f4HYutWX_U4zJoA&s",
                            IsVehicleApproved = false,
                            LocationRegion = "София",
                            LocationTown = "София",
                            MoreInformation = "Перфектно запазен автомобил с пълен сервизен история. Има леки драскотини на предния капак.",
                            Price = 21999,
                            UserId = new Guid("58481143-b8f4-4d21-bdec-5b118dd8a15a"),
                            VinNumber = 10002,
                            Volume = 1800,
                            Year = 2015,
                            Тransmission = "Автоматична"
                        },
                        new
                        {
                            Id = new Guid("0a1f1c92-f170-481f-a301-46c8f72c9b82"),
                            Color = "Син",
                            Condition = "Употребяван",
                            Currency = "лв",
                            Distance = 128000,
                            EditionId = new Guid("d06fd2a8-60f9-44fe-9484-5358855851b8"),
                            EuroStandard = "Euro 4",
                            Fuel = "Дизел",
                            HoursePower = 120,
                            ImageURL = "https://wallpapers.com/images/hd/audi-q7-1920-x-1080-wallpaper-ty4995qkcstpam9g.jpg",
                            IsVehicleApproved = false,
                            LocationRegion = "Варна",
                            LocationTown = "Звездица",
                            MoreInformation = "Добре поддържан семейен автомобил. Нови гуми и спирачни дискове.",
                            Price = 13500,
                            UserId = new Guid("58481143-b8f4-4d21-bdec-5b118dd8a15a"),
                            VinNumber = 10003,
                            Volume = 2200,
                            Year = 2012,
                            Тransmission = "Ръчна"
                        },
                        new
                        {
                            Id = new Guid("2e1506d8-3bf5-44a3-a123-f61b2d8372ba"),
                            Color = "Сив",
                            Condition = "Употребяван",
                            Currency = "лв",
                            Distance = 75000,
                            EditionId = new Guid("2e89ffec-aae1-4620-b5f9-81b3fd59b04d"),
                            EuroStandard = "Euro 6",
                            Fuel = "Хибрид",
                            HoursePower = 200,
                            ImageURL = "https://i.pinimg.com/originals/1a/e6/ef/1ae6efcc6d506cbf6856226e430c4089.webp",
                            IsVehicleApproved = false,
                            LocationRegion = "Пловдив",
                            LocationTown = "Хисаря",
                            MoreInformation = "Луксозен седан с пълен пакет от екстри. Идеален за градско и извънградско шофиране.",
                            Price = 28900,
                            UserId = new Guid("58481143-b8f4-4d21-bdec-5b118dd8a15a"),
                            VinNumber = 10004,
                            Volume = 3000,
                            Year = 2018,
                            Тransmission = "Автоматична"
                        },
                        new
                        {
                            Id = new Guid("30040efe-5fae-4561-a0cc-ddf6c8506fcf"),
                            Color = "Бял",
                            Condition = "Употребяван",
                            Currency = "лв",
                            Distance = 105000,
                            EditionId = new Guid("addca70a-f8e1-4165-9ad6-ead636411b65"),
                            EuroStandard = "Euro 5",
                            Fuel = "Бензин",
                            HoursePower = 90,
                            ImageURL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQrnXVaRLhg0-IVMjYYDpNcglt-_gBc6Milsv556WeEdQ&s",
                            IsVehicleApproved = false,
                            LocationRegion = "Бургас",
                            LocationTown = "Айтос",
                            MoreInformation = "Изключително икономичен автомобил, подходящ за градско пътуване. Нови амортисьори.",
                            Price = 8500,
                            UserId = new Guid("58481143-b8f4-4d21-bdec-5b118dd8a15a"),
                            VinNumber = 10005,
                            Volume = 1600,
                            Year = 2010,
                            Тransmission = "Ръчна"
                        },
                        new
                        {
                            Id = new Guid("473c0c59-59b5-4fcb-811d-9ec16be8227b"),
                            Color = "Черен",
                            Condition = "Употребяван",
                            Currency = "лв",
                            Distance = 185000,
                            EditionId = new Guid("71545e27-d6f3-41c6-ad01-d422b733c252"),
                            EuroStandard = "Euro 4",
                            Fuel = "Дизел",
                            HoursePower = 140,
                            ImageURL = "https://i.pinimg.com/originals/12/0d/6b/120d6b8793349feb2388eb99bea99fc2.jpg",
                            IsVehicleApproved = false,
                            LocationRegion = "Русе",
                            LocationTown = "Мартен",
                            MoreInformation = "Надежден и здрав пикап. Има леки външни забележки.",
                            Price = 12300,
                            UserId = new Guid("58481143-b8f4-4d21-bdec-5b118dd8a15a"),
                            VinNumber = 10006,
                            Volume = 2500,
                            Year = 2011,
                            Тransmission = "Ръчна"
                        },
                        new
                        {
                            Id = new Guid("cb214956-0b7f-4d4e-954b-ab193df28bcc"),
                            Color = "Сребрист",
                            Condition = "Употребяван",
                            Currency = "лв",
                            Distance = 67000,
                            EditionId = new Guid("1e9ade8f-9650-43cd-9cb9-cf167e53d61e"),
                            EuroStandard = "Euro 6",
                            Fuel = "Бензин",
                            HoursePower = 160,
                            ImageURL = "https://cdn.motor1.com/images/mgl/OoeOzl/s1/bmw-i5-edrive40-touring-2024.jpg",
                            IsVehicleApproved = false,
                            LocationRegion = "Стара Загора",
                            LocationTown = "Раднево",
                            MoreInformation = "Спортен хечбек с елегантен дизайн. Пълен сервизен история в оторизиран сервиз.",
                            Price = 18900,
                            UserId = new Guid("58481143-b8f4-4d21-bdec-5b118dd8a15a"),
                            VinNumber = 10007,
                            Volume = 2000,
                            Year = 2017,
                            Тransmission = "Автоматична"
                        },
                        new
                        {
                            Id = new Guid("46e5e670-a3c7-4d9c-ae21-36ea81e7130e"),
                            Color = "Син",
                            Condition = "Употребяван",
                            Currency = "лв",
                            Distance = 98000,
                            EditionId = new Guid("9b5026f5-a2da-4fd1-9d64-adfbd1e1034e"),
                            EuroStandard = "Euro 5",
                            Fuel = "Дизел",
                            HoursePower = 120,
                            ImageURL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTgaB8Wc0vQIF1fAdhaeFqEmq88MxsP8jn4JCAK7bwY9A&s",
                            IsVehicleApproved = false,
                            LocationRegion = "Плевен",
                            LocationTown = "Плевен",
                            MoreInformation = "Семеен автомобил с комфортна икономичност. Идеален за пътувания с цялото семейство.",
                            Price = 10500,
                            UserId = new Guid("58481143-b8f4-4d21-bdec-5b118dd8a15a"),
                            VinNumber = 10008,
                            Volume = 1800,
                            Year = 2013,
                            Тransmission = "Ръчна"
                        },
                        new
                        {
                            Id = new Guid("ff6a5a93-ceff-4ac3-bf26-c321717816cb"),
                            Color = "Червен",
                            Condition = "Употребяван",
                            Currency = "лв",
                            Distance = 74000,
                            EditionId = new Guid("aa7212f8-75b8-474a-91e2-dda3bc404caf"),
                            EuroStandard = "Euro 6",
                            Fuel = "Бензин",
                            HoursePower = 130,
                            ImageURL = "https://wallpapers.com/images/hd/bmw-x5-1920-x-1080-wallpaper-v6n1t0uhafvmg7q3.jpg",
                            IsVehicleApproved = false,
                            LocationRegion = "Хасково",
                            LocationTown = "Харманли",
                            MoreInformation = "Здрав и надежден автомобил.",
                            Price = 14999,
                            UserId = new Guid("58481143-b8f4-4d21-bdec-5b118dd8a15a"),
                            VinNumber = 10009,
                            Volume = 2200,
                            Year = 2016,
                            Тransmission = "Автоматична"
                        });
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.VehicleTypeSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypeSections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("631cbfed-14b6-4350-a5cf-9f9980501428"),
                            Section = "Автомобили и джипове"
                        },
                        new
                        {
                            Id = new Guid("f2ad3170-37d5-483d-a4f2-26b933c67118"),
                            Section = "Бусове"
                        },
                        new
                        {
                            Id = new Guid("213a952a-30ff-4e56-b256-1cfb795c7a01"),
                            Section = "Камиони"
                        });
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.VehicleTypeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleTypeSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeSectionId");

                    b.ToTable("VehicleTypeTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c80fdbba-9d3d-485c-bb9d-085da4e9b69e"),
                            Type = "Ван",
                            VehicleTypeSectionId = new Guid("631cbfed-14b6-4350-a5cf-9f9980501428")
                        },
                        new
                        {
                            Id = new Guid("5e07a858-09c8-4653-9603-e59dcc1aea23"),
                            Type = "Джип",
                            VehicleTypeSectionId = new Guid("631cbfed-14b6-4350-a5cf-9f9980501428")
                        },
                        new
                        {
                            Id = new Guid("ef5f6c10-a42e-4fe9-8f7a-5170d0b40f14"),
                            Type = "Кабрио",
                            VehicleTypeSectionId = new Guid("631cbfed-14b6-4350-a5cf-9f9980501428")
                        },
                        new
                        {
                            Id = new Guid("ad5fbbce-fb6c-4e13-92ca-2f4b97911f49"),
                            Type = "Комби",
                            VehicleTypeSectionId = new Guid("631cbfed-14b6-4350-a5cf-9f9980501428")
                        },
                        new
                        {
                            Id = new Guid("ae578a5d-e436-4458-a851-b0007d9d30bf"),
                            Type = "Бордови",
                            VehicleTypeSectionId = new Guid("f2ad3170-37d5-483d-a4f2-26b933c67118")
                        },
                        new
                        {
                            Id = new Guid("2300898e-6b6f-41fd-a753-02a23634f764"),
                            Type = "Самосвал",
                            VehicleTypeSectionId = new Guid("f2ad3170-37d5-483d-a4f2-26b933c67118")
                        },
                        new
                        {
                            Id = new Guid("c2235044-8910-4cbe-ac12-a5f8ecc0b4d6"),
                            Type = "Товарен",
                            VehicleTypeSectionId = new Guid("f2ad3170-37d5-483d-a4f2-26b933c67118")
                        },
                        new
                        {
                            Id = new Guid("faba9024-217b-45f5-b1d4-45f1036a0995"),
                            Type = "Товаропътнически",
                            VehicleTypeSectionId = new Guid("f2ad3170-37d5-483d-a4f2-26b933c67118")
                        },
                        new
                        {
                            Id = new Guid("31347551-d8ce-48b8-8d73-9338163cd56f"),
                            Type = "Кран",
                            VehicleTypeSectionId = new Guid("213a952a-30ff-4e56-b256-1cfb795c7a01")
                        },
                        new
                        {
                            Id = new Guid("14690830-faee-4cb9-84ca-8234a0696e8a"),
                            Type = "Влекач",
                            VehicleTypeSectionId = new Guid("213a952a-30ff-4e56-b256-1cfb795c7a01")
                        },
                        new
                        {
                            Id = new Guid("481e996e-febd-4d6d-a552-df039180948e"),
                            Type = "Снегорин",
                            VehicleTypeSectionId = new Guid("213a952a-30ff-4e56-b256-1cfb795c7a01")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WheelsMarket.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WheelsMarket.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WheelsMarket.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WheelsMarket.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.Brand", b =>
                {
                    b.HasOne("WheelsMarket.Data.Models.VehicleTypeType", "VehicleTypeType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleTypeType");
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.Edition", b =>
                {
                    b.HasOne("WheelsMarket.Data.Models.Brand", "Brand")
                        .WithMany("Editions")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.Favourite", b =>
                {
                    b.HasOne("WheelsMarket.Data.Models.User", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WheelsMarket.Data.Models.Vehicle", "Vehicle")
                        .WithMany("FavouritesBy")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.Vehicle", b =>
                {
                    b.HasOne("WheelsMarket.Data.Models.Edition", "Edition")
                        .WithMany("Vehicles")
                        .HasForeignKey("EditionId");

                    b.HasOne("WheelsMarket.Data.Models.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId");

                    b.Navigation("Edition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.VehicleTypeType", b =>
                {
                    b.HasOne("WheelsMarket.Data.Models.VehicleTypeSection", "VehicleTypeSection")
                        .WithMany("VehicleTypeType")
                        .HasForeignKey("VehicleTypeSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleTypeSection");
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.Brand", b =>
                {
                    b.Navigation("Editions");
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.Edition", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.User", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.Vehicle", b =>
                {
                    b.Navigation("FavouritesBy");
                });

            modelBuilder.Entity("WheelsMarket.Data.Models.VehicleTypeSection", b =>
                {
                    b.Navigation("VehicleTypeType");
                });
#pragma warning restore 612, 618
        }
    }
}
